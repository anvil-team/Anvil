{"version":3,"sources":["webpack:///./src/components/UI/SearchBox/search-box.scss","webpack:///./src/components/UI/SearchBox/index.jsx","webpack:///./src/layouts/BlankContent.jsx","webpack:///./src/routes/permission/user/UserTableForm.jsx","webpack:///./src/routes/permission/user/DistributionApplicationModal.jsx","webpack:///./src/routes/permission/user/UserManage.jsx"],"names":["module","exports","box","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_search_box_scss__WEBPACK_IMPORTED_MODULE_1__","_search_box_scss__WEBPACK_IMPORTED_MODULE_1___default","SearchBox","props","a","createElement","className","styles","children","d","__webpack_exports__","BlankContent","_layouts_scss__WEBPACK_IMPORTED_MODULE_1__","_layouts_scss__WEBPACK_IMPORTED_MODULE_1___default","TableForm","_this","_classCallCheck","this","_getPrototypeOf","call","_defineProperty","_assertThisInitialized","key","e","preventDefault","newData","state","data","map","item","_objectSpread","target","getRowByKey","editable","cacheOriginData","setState","push","id","concat","index","realName","username","position","department","roleId","isNew","roleComboList","userState","title","width","dataIndex","render","text","record","react_default","input","value","autoFocus","onChange","handleFieldChange","onKeyPress","handleKeyPress","placeholder","es_select","style","role","Option","roleName","loading","onClick","handleSaveRow","divider","type","popconfirm","onConfirm","handleRemove","handleCancel","toggleEditable","handleToDistributionProject","dispatch","payload","distributionVis","userNow","PureComponent","nextProps","preState","isEqual_default","filter","_this2","_this3","fieldName","_this4","_this5","persist","setTimeout","clickedCancel","message","error","focus","_this6","Object","assign","_this$state","react","table","rowKey","columns","getColumns","dataSource","pagination","size","es_button","marginTop","marginBottom","newMember","icon","connect","DistributionApplicationModal","_this$props","applicationComboList","applicationState","targetKeys","app","includes","pro","applicationName","nextTargetKeys","sourceSelectedKeys","targetSelectedKeys","selectedKeys","_toConsumableArray","React","Component","_this$props2","onClose","applicationListLoading","userVis","modal","visible","onCancel","onOk","handleDistributionApplication","spin","spinning","transfer","getTransferDataSource","handleTransferChange","onSelectChange","handleTransferSelectChange","UserManage","field","UserManage_defineProperty","form","userList","getFieldDecorator","Fragment","es_form","layout","Item","handleChange","onPressEnter","handleSearch","UserTableForm","user_DistributionApplicationModal","handleClose","create"],"mappings":"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","file":"static/js/11.6a9f2ec8.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"anvil-search-box__box___16M9-\"};","import React from 'react';\nimport styles from './search-box.scss';\n\nconst SearchBox = (props) => {\n  return <div className={styles.box}>{props.children}</div>;\n};\n\nexport default SearchBox;\n","import React from 'react';\nimport styles from './layouts.scss';\n\nexport default function BlankContent(props) {\n  return <div className={styles['blank-content']}>{props.children}</div>;\n}\n","import React, { PureComponent, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Table, Button, Input, message, Popconfirm, Divider, Select } from 'antd';\nimport { isEqual } from 'lodash';\n\nclass TableForm extends PureComponent {\n  index = 0;\n\n  cacheOriginData = {};\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: props.value,\n      loading: false,\n      /* eslint-disable-next-line react/no-unused-state */\n      value: props.value,\n    };\n  }\n\n  static defaultProps = { onChange() {} };\n\n  static getDerivedStateFromProps(nextProps, preState) {\n    if (isEqual(nextProps.value, preState.value)) {\n      return null;\n    }\n    return {\n      data: nextProps.value,\n      value: nextProps.value,\n    };\n  }\n\n  getRowByKey(key, newData) {\n    const { data } = this.state;\n    return (newData || data).filter((item) => item.id === key)[0];\n  }\n\n  toggleEditable = (key) => {\n    return (e) => {\n      e.preventDefault();\n      const { data } = this.state;\n      const newData = data.map((item) => ({ ...item }));\n      const target = this.getRowByKey(key, newData);\n      if (target) {\n        // 进入编辑状态时保存原始数据\n        if (!target.editable) {\n          this.cacheOriginData[key] = { ...target };\n        }\n        target.editable = !target.editable;\n        this.setState({ data: newData });\n      }\n    };\n  };\n\n  newMember = () => {\n    const { data } = this.state;\n    const newData = data.map((item) => ({ ...item }));\n    newData.push({\n      id: `NEW_TEMP_ID_${this.index}`,\n      realName: '',\n      username: '',\n      position: '',\n      department: '',\n      roleId: null,\n      editable: true,\n      isNew: true,\n    });\n    this.index += 1;\n    this.setState({ data: newData });\n  };\n\n  handleRemove(id) {\n    return () => {\n      const { data } = this.state;\n      const { onChange } = this.props;\n      const newData = data.filter((item) => item.id !== id);\n      this.setState({ data: newData });\n      onChange(newData);\n    };\n  }\n\n  handleKeyPress(id) {\n    return (e) => {\n      if (e.key === 'Enter') this.handleSaveRow(e, id);\n    };\n  }\n\n  handleFieldChange(fieldName, key) {\n    return (e) => {\n      const { data } = this.state;\n      const newData = data.map((item) => ({ ...item }));\n      const target = this.getRowByKey(key, newData);\n      if (target) {\n        if (e.target) {\n          target[fieldName] = e.target.value;\n          this.setState({ data: newData });\n        } else {\n          target[fieldName] = e;\n          this.setState({ data: newData });\n        }\n      }\n    };\n  }\n\n  handleSaveRow(key) {\n    return (e) => {\n      e.persist();\n      this.setState({ loading: true });\n\n      setTimeout(() => {\n        if (this.clickedCancel) {\n          this.clickedCancel = false;\n          return;\n        }\n        const target = this.getRowByKey(key) || {};\n        if (!target.realName || !target.username || !target.roleId) {\n          message.error('请填写完整成员信息。');\n          e.target.focus();\n          this.setState({ loading: false });\n          return;\n        }\n        delete target.isNew;\n        this.toggleEditable(e, key);\n        const { data } = this.state;\n        const { onChange } = this.props;\n        onChange(data);\n\n        this.setState({ loading: false });\n      }, 500);\n    };\n  }\n\n  handleCancel(key) {\n    return (e) => {\n      this.clickedCancel = true;\n      e.preventDefault();\n      const { data } = this.state;\n      const newData = data.map((item) => ({ ...item }));\n      const target = this.getRowByKey(key, newData);\n      if (this.cacheOriginData[key]) {\n        Object.assign(target, this.cacheOriginData[key]);\n        delete this.cacheOriginData[key];\n      }\n      target.editable = false;\n      this.setState({ data: newData });\n      this.clickedCancel = false;\n    };\n  }\n\n  render() {\n    const { loading, data } = this.state;\n\n    return (\n      <Fragment>\n        <Table\n          rowKey=\"id\"\n          loading={loading}\n          columns={this.getColumns()}\n          dataSource={data}\n          pagination={false}\n          size=\"middle\"\n        />\n        <Button\n          style={{ width: '100%', marginTop: 16, marginBottom: 8 }}\n          type=\"dashed\"\n          onClick={this.newMember}\n          icon=\"plus\"\n        >\n          新增成员\n        </Button>\n      </Fragment>\n    );\n  }\n\n  getColumns = () => {\n    const { userState } = this.props;\n    const { roleComboList } = userState;\n\n    return [\n      {\n        title: '姓名',\n        width: '15%',\n        dataIndex: 'realName',\n        render: (text, record) => {\n          if (record.editable) {\n            return (\n              <Input\n                value={text}\n                autoFocus\n                onChange={this.handleFieldChange('realName', record.id)}\n                onKeyPress={this.handleKeyPress(record.id)}\n                placeholder=\"成员姓名\"\n              />\n            );\n          }\n          return text;\n        },\n      },\n      {\n        title: '用户名',\n        width: '15%',\n        dataIndex: 'username',\n        render: (text, record) => {\n          if (record.editable) {\n            return (\n              <Input\n                value={text}\n                onChange={this.handleFieldChange('username', record.id)}\n                onKeyPress={this.handleKeyPress(record.id)}\n                placeholder=\"工号\"\n              />\n            );\n          }\n          return text;\n        },\n      },\n      {\n        title: '部门信息',\n        width: '20%',\n        dataIndex: 'department',\n        render: (text, record) => {\n          if (record.editable) {\n            return (\n              <Input\n                value={text}\n                onChange={this.handleFieldChange('department', record.id)}\n                onKeyPress={this.handleKeyPress(record.id)}\n                placeholder=\"所属部门\"\n              />\n            );\n          }\n          return text;\n        },\n      },\n      {\n        title: '职位',\n        width: '15%',\n        dataIndex: 'position',\n        render: (text, record) => {\n          if (record.editable) {\n            return (\n              <Input\n                placeholder=\"职位\"\n                value={text}\n                onChange={this.handleFieldChange('position', record.id)}\n                onKeyPress={this.handleKeyPress(record.id)}\n              />\n            );\n          }\n          return text;\n        },\n      },\n      {\n        title: '角色名称',\n        width: '15%',\n        dataIndex: 'roleName',\n        render: (text, record) => {\n          if (record.editable) {\n            return (\n              <Select\n                placeholder=\"选择角色\"\n                style={{ width: '100%' }}\n                value={record.roleId}\n                onChange={this.handleFieldChange('roleId', record.id)}\n                onKeyPress={this.handleKeyPress(record.id)}\n              >\n                {roleComboList.map((role) => (\n                  <Select.Option key={role.id} value={role.id}>\n                    {role.roleName}\n                  </Select.Option>\n                ))}\n              </Select>\n            );\n          }\n          return text;\n        },\n      },\n      {\n        title: '操作',\n        key: 'action',\n        render: (text, record) => {\n          const { loading } = this.state;\n          if (!!record.editable && loading) {\n            return null;\n          }\n          if (record.editable) {\n            if (record.isNew) {\n              return (\n                <span>\n                  <a onClick={this.handleSaveRow(record.id)}>添加</a>\n                  <Divider type=\"vertical\" />\n                  <Popconfirm title=\"是否要删除此行？\" onConfirm={this.handleRemove(record.id)}>\n                    <a>删除</a>\n                  </Popconfirm>\n                </span>\n              );\n            }\n            return (\n              <span>\n                <a onClick={this.handleSaveRow(record.id)}>保存</a>\n                <Divider type=\"vertical\" />\n                <a onClick={this.handleCancel(record.id)}>取消</a>\n              </span>\n            );\n          }\n          return (\n            <span>\n              <a onClick={this.toggleEditable(record.id)}>编辑</a>\n              <Divider type=\"vertical\" />\n              <a onClick={this.handleToDistributionProject(record)}>分配项目</a>\n              <Divider type=\"vertical\" />\n              <Popconfirm title=\"是否要删除此行？\" onConfirm={this.handleRemove(record.id)}>\n                <a>删除</a>\n              </Popconfirm>\n            </span>\n          );\n        },\n      },\n    ];\n  };\n\n  handleToDistributionProject = (record) => () => {\n    const { dispatch } = this.props;\n    dispatch({ type: 'user/setUserVis', payload: { data: { distributionVis: true } } });\n    dispatch({ type: 'user/setState', payload: { userNow: record } });\n    dispatch({ type: 'user/fetchUserApplicationAssign' });\n  };\n}\n\nconst mapStateToProps = (state) => ({\n  userState: state.userState,\n});\n\nexport default connect(mapStateToProps)(TableForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Modal, Transfer, Spin } from 'antd';\n\nclass DistributionApplicationModal extends React.Component {\n  componentDidMount() {\n    const { dispatch } = this.props;\n\n    dispatch({ type: 'application/fetchApplicationCombo' });\n  }\n\n  render() {\n    const { applicationState, userState, onClose } = this.props;\n    const { applicationListLoading } = applicationState;\n    const { userVis, userNow, selectedKeys, targetKeys } = userState;\n\n    return (\n      <Modal\n        visible={userVis.distributionVis}\n        title={`给${userNow.username} 分配项目`}\n        onCancel={onClose}\n        onOk={this.handleDistributionApplication}\n      >\n        <Spin spinning={applicationListLoading}>\n          <Transfer\n            rowKey={(record) => record.key}\n            render={(item) => item.title}\n            selectedKeys={selectedKeys}\n            targetKeys={targetKeys}\n            dataSource={this.getTransferDataSource()}\n            onChange={this.handleTransferChange}\n            onSelectChange={this.handleTransferSelectChange}\n          />\n        </Spin>\n      </Modal>\n    );\n  }\n\n  getTransferDataSource = () => {\n    const {\n      applicationState: { applicationComboList },\n      userState: { targetKeys },\n    } = this.props;\n\n    return applicationComboList\n      .filter((app) => !targetKeys.includes(app.id))\n      .map((pro) => ({\n        key: pro.id,\n        title: pro.applicationName,\n      }));\n  };\n\n  handleTransferChange = (nextTargetKeys) => {\n    const { dispatch } = this.props;\n    dispatch({ type: 'user/setState', payload: { targetKeys: nextTargetKeys } });\n  };\n\n  handleTransferSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\n    const { dispatch } = this.props;\n\n    dispatch({\n      type: 'user/setState',\n      payload: { selectedKeys: [...sourceSelectedKeys, ...targetSelectedKeys] },\n    });\n  };\n\n  handleDistributionApplication = () => {\n    const { dispatch } = this.props;\n    dispatch({ type: 'user/updateUserApplicationAssign' });\n  };\n}\n\nconst mapStateToProps = (state) => ({\n  userState: state.userState,\n  applicationState: state.applicationState,\n});\n\nexport default connect(mapStateToProps)(DistributionApplicationModal);\n","/*\n * @Author: zhenglfsir@gmail.com\n * @Date: 2019-01-03 22:08:18\n * @Last Modified by: zhenglfsir@gmail.com\n * @Last Modified time: 2019-03-06 21:44:02\n * 用户管理\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, Input, Button } from 'antd';\nimport BlankContent from 'src/layouts/BlankContent';\nimport SearchBox from 'src/components/UI/SearchBox';\nimport UserTableForm from './UserTableForm';\nimport DistributionApplicationModal from './DistributionApplicationModal';\n\nclass UserManage extends React.Component {\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch({ type: 'user/fetchUserList' });\n    dispatch({ type: 'user/fetchRoleComboList' });\n  }\n\n  render() {\n    const { userState, form } = this.props;\n    const { userList } = userState;\n    const { getFieldDecorator } = form;\n\n    return (\n      <>\n        <BlankContent>\n          <SearchBox>\n            <Form layout=\"inline\">\n              <Form.Item>\n                {getFieldDecorator('keyword')(\n                  <Input\n                    placeholder=\"请输入\"\n                    onChange={this.handleChange}\n                    onPressEnter={this.handleSearch}\n                  />\n                )}\n              </Form.Item>\n              <Form.Item>\n                <Button type=\"primary\" onClick={this.handleSearch}>\n                  搜索\n                </Button>\n              </Form.Item>\n            </Form>\n          </SearchBox>\n          <UserTableForm value={userList} pagination={false} />\n        </BlankContent>\n        <DistributionApplicationModal onClose={this.handleClose('distributionVis')} />\n      </>\n    );\n  }\n\n  handleChange = (e) => {\n    const { dispatch } = this.props;\n\n    dispatch({ type: 'user/setState', payload: { username: e.target.key } });\n  };\n\n  handleSearch = () => {\n    const { dispatch } = this.props;\n\n    dispatch({ type: 'user/fetchUserList' });\n  };\n\n  handleClose = (field) => () => {\n    const { dispatch } = this.props;\n    dispatch({ type: 'user/setUserVis', payload: { data: { [field]: false } } });\n  };\n}\n\nexport default connect((state) => ({\n  userState: state.userState,\n}))(Form.create()(UserManage));\n"],"sourceRoot":""}