{"version":3,"sources":["webpack:///./src/components/UI/SearchBox/search-box.scss","webpack:///./src/layouts/BlankContent.jsx","webpack:///./src/components/UI/SearchBox/index.jsx","webpack:///./src/routes/permission/user/UserTableForm.jsx","webpack:///./src/routes/permission/user/UserManage.jsx"],"names":["module","exports","box","BlankContent","props","react_default","a","createElement","className","styles","children","SearchBox","TableForm","_this","_classCallCheck","this","_getPrototypeOf","call","_defineProperty","_assertThisInitialized","key","e","preventDefault","newData","state","data","map","item","_objectSpread","target","getRowByKey","editable","cacheOriginData","setState","push","id","concat","index","realName","username","position","department","roleId","isNew","roleList","userState","title","width","dataIndex","render","text","record","input","value","autoFocus","onChange","handleFieldChange","onKeyPress","handleKeyPress","placeholder","es_select","style","role","Option","roleName","loading","onClick","handleSaveRow","divider","type","popconfirm","onConfirm","handleRemove","handleCancel","toggleEditable","handleToDistributionProject","dispatch","payload","distributionVis","userNow","PureComponent","nextProps","preState","isEqual_default","filter","_this2","_this3","fieldName","_this4","_this5","persist","setTimeout","clickedCancel","message","error","focus","_this6","Object","assign","_this$state","react","table","rowKey","columns","getColumns","dataSource","pagination","es_button","marginTop","marginBottom","newMember","icon","connect","UserManage","form","console","log","React","Component","_this$props","userList","getFieldDecorator","Fragment","UI_SearchBox","es_form","layout","Item","UserTableForm","handleTableFormChange","create"],"mappings":"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","file":"static/js/11.718881ef.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"anvil-search-box__box___16M9-\"};","import React from 'react';\nimport styles from './layouts.scss';\n\nexport default function BlankContent(props) {\n  return <div className={styles['blank-content']}>{props.children}</div>;\n}\n","import React from 'react';\nimport styles from './search-box.scss';\n\nconst SearchBox = (props) => {\n  return <div className={styles.box}>{props.children}</div>;\n};\n\nexport default SearchBox;\n","import React, { PureComponent, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Table, Button, Input, message, Popconfirm, Divider, Select } from 'antd';\nimport { isEqual } from 'lodash';\n\nclass TableForm extends PureComponent {\n  index = 0;\n\n  cacheOriginData = {};\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: props.value,\n      loading: false,\n      /* eslint-disable-next-line react/no-unused-state */\n      value: props.value,\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, preState) {\n    if (isEqual(nextProps.value, preState.value)) {\n      return null;\n    }\n    return {\n      data: nextProps.value,\n      value: nextProps.value,\n    };\n  }\n\n  getRowByKey(key, newData) {\n    const { data } = this.state;\n    return (newData || data).filter((item) => item.id === key)[0];\n  }\n\n  toggleEditable = (key) => {\n    return (e) => {\n      e.preventDefault();\n      const { data } = this.state;\n      const newData = data.map((item) => ({ ...item }));\n      const target = this.getRowByKey(key, newData);\n      if (target) {\n        // 进入编辑状态时保存原始数据\n        if (!target.editable) {\n          this.cacheOriginData[key] = { ...target };\n        }\n        target.editable = !target.editable;\n        this.setState({ data: newData });\n      }\n    };\n  };\n\n  newMember = () => {\n    const { data } = this.state;\n    const newData = data.map((item) => ({ ...item }));\n    newData.push({\n      id: `NEW_TEMP_ID_${this.index}`,\n      realName: '',\n      username: '',\n      position: '',\n      department: '',\n      roleId: null,\n      editable: true,\n      isNew: true,\n    });\n    this.index += 1;\n    this.setState({ data: newData });\n  };\n\n  handleRemove(id) {\n    return () => {\n      const { data } = this.state;\n      const { onChange } = this.props;\n      const newData = data.filter((item) => item.id !== id);\n      this.setState({ data: newData });\n      onChange(newData);\n    };\n  }\n\n  handleKeyPress(id) {\n    return (e) => {\n      if (e.key === 'Enter') this.handleSaveRow(e, id);\n    };\n  }\n\n  handleFieldChange(fieldName, key) {\n    return (e) => {\n      const { data } = this.state;\n      const newData = data.map((item) => ({ ...item }));\n      const target = this.getRowByKey(key, newData);\n      if (target) {\n        if (e.target) {\n          target[fieldName] = e.target.value;\n          this.setState({ data: newData });\n        } else {\n          target[fieldName] = e;\n          this.setState({ data: newData });\n        }\n      }\n    };\n  }\n\n  handleSaveRow(key) {\n    return (e) => {\n      e.persist();\n      this.setState({ loading: true });\n\n      setTimeout(() => {\n        if (this.clickedCancel) {\n          this.clickedCancel = false;\n          return;\n        }\n        const target = this.getRowByKey(key) || {};\n        if (!target.realName || !target.username || !target.roleId) {\n          message.error('请填写完整成员信息。');\n          e.target.focus();\n          this.setState({ loading: false });\n          return;\n        }\n        delete target.isNew;\n        this.toggleEditable(e, key);\n        const { data } = this.state;\n        const { onChange } = this.props;\n        onChange(data);\n\n        this.setState({ loading: false });\n      }, 500);\n    };\n  }\n\n  handleCancel(key) {\n    return (e) => {\n      this.clickedCancel = true;\n      e.preventDefault();\n      const { data } = this.state;\n      const newData = data.map((item) => ({ ...item }));\n      const target = this.getRowByKey(key, newData);\n      if (this.cacheOriginData[key]) {\n        Object.assign(target, this.cacheOriginData[key]);\n        delete this.cacheOriginData[key];\n      }\n      target.editable = false;\n      this.setState({ data: newData });\n      this.clickedCancel = false;\n    };\n  }\n\n  render() {\n    const { loading, data } = this.state;\n\n    return (\n      <Fragment>\n        <Table\n          rowKey=\"id\"\n          loading={loading}\n          columns={this.getColumns()}\n          dataSource={data}\n          pagination={false}\n        />\n        <Button\n          style={{ width: '100%', marginTop: 16, marginBottom: 8 }}\n          type=\"dashed\"\n          onClick={this.newMember}\n          icon=\"plus\"\n        >\n          新增成员\n        </Button>\n      </Fragment>\n    );\n  }\n\n  getColumns = () => {\n    const { userState } = this.props;\n    const { roleList } = userState;\n\n    return [\n      {\n        title: '姓名',\n        width: '15%',\n        dataIndex: 'realName',\n        render: (text, record) => {\n          if (record.editable) {\n            return (\n              <Input\n                value={text}\n                autoFocus\n                onChange={this.handleFieldChange('realName', record.id)}\n                onKeyPress={this.handleKeyPress(record.id)}\n                placeholder=\"成员姓名\"\n              />\n            );\n          }\n          return text;\n        },\n      },\n      {\n        title: '用户名',\n        width: '15%',\n        dataIndex: 'username',\n        render: (text, record) => {\n          if (record.editable) {\n            return (\n              <Input\n                value={text}\n                onChange={this.handleFieldChange('username', record.id)}\n                onKeyPress={this.handleKeyPress(record.id)}\n                placeholder=\"工号\"\n              />\n            );\n          }\n          return text;\n        },\n      },\n      {\n        title: '部门信息',\n        width: '20%',\n        dataIndex: 'department',\n        render: (text, record) => {\n          if (record.editable) {\n            return (\n              <Input\n                value={text}\n                onChange={this.handleFieldChange('department', record.id)}\n                onKeyPress={this.handleKeyPress(record.id)}\n                placeholder=\"所属部门\"\n              />\n            );\n          }\n          return text;\n        },\n      },\n      {\n        title: '职位',\n        width: '15%',\n        dataIndex: 'position',\n        render: (text, record) => {\n          if (record.editable) {\n            return (\n              <Input\n                placeholder=\"职位\"\n                value={text}\n                onChange={this.handleFieldChange('position', record.id)}\n                onKeyPress={this.handleKeyPress(record.id)}\n              />\n            );\n          }\n          return text;\n        },\n      },\n      {\n        title: '角色名称',\n        width: '15%',\n        dataIndex: 'roleName',\n        render: (text, record) => {\n          if (record.editable) {\n            return (\n              <Select\n                placeholder=\"选择角色\"\n                style={{ width: '100%' }}\n                value={record.roleId}\n                onChange={this.handleFieldChange('roleId', record.id)}\n                onKeyPress={this.handleKeyPress(record.id)}\n              >\n                {roleList.map((role) => (\n                  <Select.Option key={role.id} value={role.id}>\n                    {role.roleName}\n                  </Select.Option>\n                ))}\n              </Select>\n            );\n          }\n          return text;\n        },\n      },\n      {\n        title: '操作',\n        key: 'action',\n        render: (text, record) => {\n          const { loading } = this.state;\n          if (!!record.editable && loading) {\n            return null;\n          }\n          if (record.editable) {\n            if (record.isNew) {\n              return (\n                <span>\n                  <a onClick={this.handleSaveRow(record.id)}>添加</a>\n                  <Divider type=\"vertical\" />\n                  <Popconfirm title=\"是否要删除此行？\" onConfirm={this.handleRemove(record.id)}>\n                    <a>删除</a>\n                  </Popconfirm>\n                </span>\n              );\n            }\n            return (\n              <span>\n                <a onClick={this.handleSaveRow(record.id)}>保存</a>\n                <Divider type=\"vertical\" />\n                <a onClick={this.handleCancel(record.id)}>取消</a>\n              </span>\n            );\n          }\n          return (\n            <span>\n              <a onClick={this.toggleEditable(record.id)}>编辑</a>\n              <Divider type=\"vertical\" />\n              <a onClick={this.handleToDistributionProject(record)}>分配项目</a>\n              <Divider type=\"vertical\" />\n              <Popconfirm title=\"是否要删除此行？\" onConfirm={this.handleRemove(record.id)}>\n                <a>删除</a>\n              </Popconfirm>\n            </span>\n          );\n        },\n      },\n    ];\n  };\n\n  handleToDistributionProject = (record) => () => {\n    const { dispatch } = this.props;\n    dispatch({\n      type: 'user/setUserVis',\n      payload: { data: { distributionVis: true, userNow: record } },\n    });\n  };\n}\n\nconst mapStateToProps = (state) => ({\n  userState: state.userState,\n});\n\nexport default connect(mapStateToProps)(TableForm);\n","/*\n * @Author: zhenglfsir@gmail.com\n * @Date: 2019-01-03 22:08:18\n * @Last Modified by: zhenglfsir@gmail.com\n * @Last Modified time: 2019-03-05 15:07:07\n * 用户管理\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, Input, Button } from 'antd';\nimport BlankContent from 'src/layouts/BlankContent';\nimport SearchBox from 'src/components/UI/SearchBox';\nimport UserTableForm from './UserTableForm';\n\nclass UserManage extends React.Component {\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch({ type: 'user/fetchUserList' });\n    dispatch({ type: 'user/fetchRoleList' });\n  }\n\n  render() {\n    const { userState, form } = this.props;\n    const { userList } = userState;\n    const { getFieldDecorator } = form;\n\n    return (\n      <>\n        <BlankContent>\n          <SearchBox>\n            <Form layout=\"inline\">\n              <Form.Item>{getFieldDecorator('keyword')(<Input placeholder=\"请输入\" />)}</Form.Item>\n              <Form.Item>\n                <Button type=\"primary\">搜索</Button>\n              </Form.Item>\n            </Form>\n          </SearchBox>\n          <UserTableForm\n            value={userList}\n            pagination={false}\n            onChange={this.handleTableFormChange}\n          />\n        </BlankContent>\n      </>\n    );\n  }\n\n  handleTableFormChange = (form) => {\n    console.log(form);\n  };\n}\n\nexport default connect((state) => ({\n  userState: state.userState,\n}))(Form.create()(UserManage));\n"],"sourceRoot":""}